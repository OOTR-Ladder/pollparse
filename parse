#!/usr/bin/env php
<?php

error_reporting(-1);

const FIRST_DOW_COL = 5;
const TZ_COL = 4;
const LEAGUE_COL = 3;

exit(main($argv));

function main(array $argv): int {
    if (count($argv) !== 2) {
        fwrite(STDERR, "Usage: {$argv[0]} CSV\n");
        return 1;
    }

    $daystr = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

    echo "day-hour,std,shu\n";
    foreach (get_adjusted_hours($argv[1]) as $dow => $hours) {
        ksort($hours);
        foreach($hours as $hour => $count) {
            printf('"%s-%02d",%d,%d'."\n", $daystr[$dow], $hour, $count['std'], $count['shu']);
        }
    }

    return 0;
}

function get_adjusted_hours(string $path): array {
    $h = fopen($path, 'r');

    $perDOW = array_fill(0, 7, []);
    fgetcsv($h, 4096); // skip headers

    while (($line = fgetcsv($h, 4096)) !== false) {
        $offset = parse_offset($line[TZ_COL]);
        if ($offset === null) {
            fwrite(STDERR, 'cannot parse TZ ' . $line[TZ_COL] . "\n");
            continue;
        }

        for ($i = FIRST_DOW_COL; $i < FIRST_DOW_COL+7; $i++) {
            if ($line[$i] === '') {
                continue;
            }

            $hours = array_merge(
                explode(',', $line[$i]),
                explode(',', $line[$i+7]),
            );

            foreach ($hours as $v) {
                $dow = $i - FIRST_DOW_COL;
                $hour = ((int) substr(trim($v), 0, -1)) + $offset;

                [$dow, $hour] = slide_dow($dow, $hour);

                if (!array_key_exists($hour, $perDOW[$dow])) {
                    $perDOW[$dow][$hour] = ['std' => 0, 'shu' => 0];
                }

                switch ($line[LEAGUE_COL]) {
                case 'Standard':
                    $perDOW[$dow][$hour]['std']++;
                    break;
                case 'Shuffled Settings':
                    $perDOW[$dow][$hour]['shu']++;
                    break;
                case 'Both equally':
                    $perDOW[$dow][$hour]['std']++;
                    $perDOW[$dow][$hour]['shu']++;
                    break;
                default:
                    fwrite(STDERR, 'cannot parse league ' . $line[LEAGUE_COL] . "\n");
                    break;
                }
            }
        }
    }

    fclose($h);
    return $perDOW;
}

function parse_offset(string $str): ?int {
    switch ($str) {
    case 'UTC':
    case 'GMT':
        return 0;
    case 'CDT':
        return -5;
    };

    if (!preg_match('`([-+])(\d{1,2})`', $str, $matches)) {
        return null;
    }

    $sign = -1;
    if ($matches[1] === '-') {
        $sign = 1;
    }

    return $sign * intval($matches[2]);
}

function slide_dow(int $dow , int $hour): array {
    $a = $dow;
    $b = $hour;

    if ($hour < 0) {
        $dow--;
        $hour = 24 + $hour;
    } else if ($hour > 24) {
        $dow++;
        $hour = $hour % 24;
    }

    if ($dow < 0) {
        $dow = 7 + $dow;
    } else if ($dow > 6) {
        $dow = 7 - $dow;
    }

    return [$dow, $hour];
}
